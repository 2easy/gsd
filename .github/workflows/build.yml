name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Move frontend dist to backend
      run: |
        rm -rf backend/dist
        mv frontend/dist backend/dist

    - name: Build for all platforms
      run: |
        platforms=("windows/amd64" "darwin/amd64" "darwin/arm64" "linux/amd64" "linux/arm64")
        for platform in "${platforms[@]}"; do
          os=${platform%/*}
          arch=${platform#*/}
          output="gsd-$os-$arch"
          if [ "$os" = "windows" ]; then
            output="$output.exe"
          fi
          echo "Building for $os/$arch..."
          GOOS=$os GOARCH=$arch go build -o "dist/$output" ./backend
        done

    - name: Test backend
      run: cd backend && go test ./...

    - name: Create release archives
      run: |
        mkdir -p releases
        cd dist
        for file in *; do
          zip "../releases/${file%.exe}.zip" "$file" "../README.md" "../LICENSE"
        done

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gsd-releases
        path: releases/*.zip

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT

    - name: Create Release
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: releases/*.zip
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        tag_name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref || format('build-{0}', steps.date.outputs.date) }}
        name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref || format('Build {0}', steps.date.outputs.date) }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}